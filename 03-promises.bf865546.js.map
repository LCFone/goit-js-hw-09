{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAQsC,SAA7BC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEKM,EAAlB,CAAEP,WAAUC,S,GAEpBA,E,KAdM,CACXQ,KAAMC,SAASC,cAAc,WAkB1BF,KAAKG,iBAAiB,UAGkB,SAAxBC,GACnBA,EAAEC,iBAYsC,IATE,IAEvBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALd,MAAOkB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGrBC,EAAYC,OAAOF,EAAOG,OAC1BC,EAAUF,OAAOH,EAAKI,OACxBE,EAAWH,OAAOJ,EAAMK,OAGnBG,EAAI,EAAGA,GAAKL,EAAWK,GAAK,EACnC3B,EAAc2B,EAAGD,GACdE,MAAK,SAAAC,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAEjBJ,EAAAgC,OAAOC,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE9D+B,OAAM,SAAAJ,G,IAAG5B,EAAQ4B,EAAR5B,SAAUC,EAAK2B,EAAL3B,MAElBJ,EAAAgC,OAAOI,QAAQ,sBAAuCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAEhEwB,GAAYD,C","sources":["src/js/03-promises.js"],"sourcesContent":["// імпорт необхідного класу Notify\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// створюю об'єкт refs для збереження посилань на DOM-елементи\nconst refs = {\n  form: document.querySelector('.form'), // знаходжу'form'\n};\n\n// функція createPromise створює об'єкт Promise з випадковим рішенням\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay }); // викликаю resolve, якщо умова виконана\n      } else {\n        reject({ position, delay }); // викликаю reject, якщо умова не виконана\n      }\n    }, delay);\n  });\n}\n\n// додаю обробник події submit на форму\nrefs.form.addEventListener('submit', onFormClick);\n\n// функція onFormClick викликається при натисканні на кнопку submit форми\nfunction onFormClick(e) {\n  e.preventDefault(); // вимикаю дії браузера\n\n  // деструктуризація елементів форми з об'єкта події\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  const amountNum = Number(amount.value); // конвертую значення поля amount в число\n  const stepNum = Number(step.value); // конвертую значення поля step в число\n  let delayNum = Number(delay.value); // конвертую значення поля delay в число\n\n  // запускаю цикл для створення та обробки об'єктів Promise\n  for (let i = 1; i <= amountNum; i += 1) {\n    createPromise(i, delayNum)\n      .then(({ position, delay }) => {\n        // виводжу повідомлення про успішно виконаний Promise\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        // виводжу повідомлення про відхилення Promise\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delayNum += stepNum; // збільшую значення затримки для наступного Promise\n  }\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","form","document","querySelector","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay1","step","amount","amountNum","Number","value","stepNum","delayNum","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.bf865546.js.map"}